/* Generated By:JJTree&JavaCC: Do not edit this line. CCAL.java */
import java.io.*;
import java.util.*;

  public class CCAL/*@bgen(jjtree)*/implements CCALTreeConstants, CCALConstants {/*@bgen(jjtree)*/
  protected static JJTCCALState jjtree = new JJTCCALState();public static Hashtable SymbolTable = new Hashtable();
    public static void main(String args[]) throws ParseException, FileNotFoundException
    {
      CCAL parser;

                if (args.length == 0)
      {
         System.out.println("Please pass in the filename");
         System.exit(1);
      }
      else
      {
                 parser = new CCAL(new FileInputStream(args[0]));

       SimpleNode root = parser.Program();

       System.out.println("Abstract Syntax Tree:");
       root.dump(" ");

       System.out.println("\u005cn\u005cn********Semantic Analysis********\u005cn");
       SemanticCheckVisitor check = new SemanticCheckVisitor();
       root.jjtAccept(check, null);
       }
    }

  static final public SimpleNode Program() throws ParseException {
                                 /*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      decl_list();
      function_list();
      main();
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                       {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void decl_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case CONST:
      decl();
      jj_consume_token(SEMI_COLON);
      decl_list();
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

  static final public void decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      var_decl();
      break;
    case CONST:
      const_decl();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void var_decl() throws ParseException {
                         /*@bgen(jjtree) Decl */
  ASTDecl jjtn000 = new ASTDecl(JJTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VAR);
      identifier();
      jj_consume_token(COLON);
      type();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void const_decl() throws ParseException {
                            /*@bgen(jjtree) Const */
  ASTConst jjtn000 = new ASTConst(JJTCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONST);
      identifier();
      jj_consume_token(COLON);
      type();
      jj_consume_token(EQUALS);
      expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void function_list() throws ParseException {
                                  /*@bgen(jjtree) FuncList */
  ASTFuncList jjtn000 = new ASTFuncList(JJTFUNCLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case VOID:
        function();
        function_list();
        break;
      default:
        jj_la1[2] = jj_gen;
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;

      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void function() throws ParseException {
                         /*@bgen(jjtree) Func */
  ASTFunc jjtn000 = new ASTFunc(JJTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type();
      identifier();
      jj_consume_token(LBR);
      parameter_list();
      jj_consume_token(RBR);
      jj_consume_token(IS);
      decl_list();
      jj_consume_token(BEGIN);
      statement_block();
      jj_consume_token(RETURN);
      jj_consume_token(LBR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBR:
      case MINUS_SIGN:
      case TRUE:
      case FALSE:
      case NUMBER:
      case ID:
        expression();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(RBR);
      jj_consume_token(SEMI_COLON);
      jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void parameter_list() throws ParseException {
                                 /*@bgen(jjtree) Params */
  ASTParams jjtn000 = new ASTParams(JJTPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        nemp_parameter_list();
        break;
      default:
        jj_la1[4] = jj_gen;
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;

      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void nemp_parameter_list() throws ParseException {
    if (jj_2_1(2)) {
      identifier();
      jj_consume_token(COLON);
      type();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        identifier();
        jj_consume_token(COLON);
        type();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          nemp_parameter_list();
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void main() throws ParseException {
                     /*@bgen(jjtree) Main */
  ASTMain jjtn000 = new ASTMain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIN);
      jj_consume_token(BEGIN);
      decl_list();
      statement_block();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void type() throws ParseException {
                     /*@bgen(jjtree) Type */
                      ASTType jjtn000 = new ASTType(JJTTYPE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.value = token;
        break;
      case BOOLEAN:
        t = jj_consume_token(BOOLEAN);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.value = token;
        break;
      case VOID:
        t = jj_consume_token(VOID);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.value = token;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
  }

  static final public void statement_block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BEGIN:
    case SKIP_IT:
    case ID:
      statement();
      statement_block();
      break;
    default:
      jj_la1[8] = jj_gen;

    }
  }

  static final public void statement() throws ParseException {
                                /*@bgen(jjtree) StateBlock */
  ASTStateBlock jjtn000 = new ASTStateBlock(JJTSTATEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(2)) {
        identifier();
        jj_consume_token(EQUALS);
        expression();
        jj_consume_token(SEMI_COLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          identifier();
          jj_consume_token(LBR);
          arg_list();
          jj_consume_token(RBR);
          jj_consume_token(SEMI_COLON);
          break;
        case BEGIN:
          jj_consume_token(BEGIN);
          statement_block();
          jj_consume_token(END);
          break;
        case IF:
          jj_consume_token(IF);
          condition();
          jj_consume_token(BEGIN);
          statement_block();
          jj_consume_token(END);
          jj_consume_token(ELSE);
          jj_consume_token(BEGIN);
          statement_block();
          jj_consume_token(END);
          break;
        case WHILE:
          jj_consume_token(WHILE);
          condition();
          jj_consume_token(BEGIN);
          statement_block();
          jj_consume_token(END);
          break;
        case SKIP_IT:
          jj_consume_token(SKIP_IT);
          jj_consume_token(SEMI_COLON);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS_SIGN:
    case TRUE:
    case FALSE:
    case NUMBER:
    case ID:
      fragment();
      bin_expr();
      break;
    case LBR:
      jj_consume_token(LBR);
      expression();
      jj_consume_token(RBR);
      bin_expr();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void bin_expr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
    case MINUS_SIGN:
      binary_op();
      expression();
      break;
    default:
      jj_la1[11] = jj_gen;

    }
  }

  static final public void binary_op() throws ParseException {
                            /*@bgen(jjtree) BinOp */
  ASTBinOp jjtn000 = new ASTBinOp(JJTBINOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
    ASTAdd jjtn001 = new ASTAdd(JJTADD);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(PLUS_SIGN);
        } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
        }
        break;
      case MINUS_SIGN:
    ASTSub jjtn002 = new ASTSub(JJTSUB);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(MINUS_SIGN);
        } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void fragment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBR:
        jj_consume_token(LBR);
        arg_list();
        jj_consume_token(RBR);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
    case MINUS_SIGN:
      jj_consume_token(MINUS_SIGN);
      identifier();
      break;
    case NUMBER:
      number();
      break;
    case TRUE:
    case FALSE:
      boolValue();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDA:
      jj_consume_token(TILDA);
      condition();
      break;
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_3(2)) {
        jj_consume_token(LBR);
        condition();
        jj_consume_token(RBR);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBR:
        case MINUS_SIGN:
        case TRUE:
        case FALSE:
        case NUMBER:
        case ID:
          expression();
          comp_op();
          expression();
          break;
        default:
          jj_la1[16] = jj_gen;
          cond_sign();
        }
      }
    }
  }

  static final public void cond_sign() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR_SIGN:
      jj_consume_token(OR_SIGN);
                ASTOR jjtn001 = new ASTOR(JJTOR);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
        condition();
      } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
      }
      break;
    case AND_SIGN:
      jj_consume_token(AND_SIGN);
                 ASTAND jjtn002 = new ASTAND(JJTAND);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
      try {
        condition();
      } catch (Throwable jjte002) {
                 if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte002;}
                 }
                 if (jjte002 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte002;}
                 }
                 {if (true) throw (Error)jjte002;}
      } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002, true);
                 }
      }
      break;
    default:
      jj_la1[17] = jj_gen;

    }
  }

  static final public void comp_op() throws ParseException {
                          /*@bgen(jjtree) CompOp */
  ASTCompOp jjtn000 = new ASTCompOp(JJTCOMPOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL_TO:
      ASTEqual jjtn001 = new ASTEqual(JJTEQUAL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(EQUAL_TO);
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
        }
        break;
      case NOT_EQUAL_TO:
      ASTNotEqual jjtn002 = new ASTNotEqual(JJTNOTEQUAL);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(NOT_EQUAL_TO);
        } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
        }
        break;
      case LESS_THAN:
      ASTLessThan jjtn003 = new ASTLessThan(JJTLESSTHAN);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(LESS_THAN);
        } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
        }
        break;
      case LESS_OR_EQUAL:
      ASTLessOrEqual jjtn004 = new ASTLessOrEqual(JJTLESSOREQUAL);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(LESS_OR_EQUAL);
        } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
        }
        break;
      case GREATER_THAN:
      ASTGreaterThan jjtn005 = new ASTGreaterThan(JJTGREATERTHAN);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
        try {
          jj_consume_token(GREATER_THAN);
        } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005, true);
      }
        }
        break;
      case GREATER_OR_EQUAL:
      ASTGreaterOrEqual jjtn006 = new ASTGreaterOrEqual(JJTGREATEROREQUAL);
      boolean jjtc006 = true;
      jjtree.openNodeScope(jjtn006);
        try {
          jj_consume_token(GREATER_OR_EQUAL);
        } finally {
      if (jjtc006) {
        jjtree.closeNodeScope(jjtn006, true);
      }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void arg_list() throws ParseException {
                            /*@bgen(jjtree) ArgList */
  ASTArgList jjtn000 = new ASTArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        nemp_arg_list();
        break;
      default:
        jj_la1[19] = jj_gen;
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;

      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void nemp_arg_list() throws ParseException {
    identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      nemp_arg_list();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  static final public void identifier() throws ParseException {
                         /*@bgen(jjtree) Id */
                          ASTId jjtn000 = new ASTId(JJTID);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.value = token;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void number() throws ParseException {
                      /*@bgen(jjtree) Num */
                       ASTNum jjtn000 = new ASTNum(JJTNUM);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMBER);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.value = token;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void boolValue() throws ParseException {
                          /*@bgen(jjtree) Bool */
                           ASTBool jjtn000 = new ASTBool(JJTBOOL);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        t = jj_consume_token(TRUE);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.value = token;
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                             jjtn000.value = token;
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3R_16() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(AND_SIGN)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(OR_SIGN)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(LBR)) return true;
    if (jj_3R_2()) return true;
    if (jj_scan_token(RBR)) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    if (jj_scan_token(TILDA)) return true;
    return false;
  }

  static private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_3()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_1()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_1()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_1() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(MINUS_SIGN)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(LBR)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_1()) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CCALTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x30000000,0x30000000,0x80000000,0x48000,0x0,0x800,0x0,0x80000000,0x0,0x0,0x48000,0x60000,0x60000,0x8000,0x40000,0x80000,0x48000,0x300000,0xfc00000,0x0,0x800,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x3,0x5060,0x4000,0x0,0x4000,0x3,0x4988,0x4988,0x5060,0x0,0x0,0x0,0x5060,0x0,0x5060,0x0,0x0,0x4000,0x0,0x60,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CCAL(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CCAL(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CCALTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CCAL(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CCALTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CCAL(CCALTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CCALTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

   }
